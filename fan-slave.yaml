substitutions:
  name: "fan-slave"
  friendly_name: "Slave"
  #Wifi behavior: never reboots if no wifi. If wifi turned on and after "access_point_timeout" no connection, activate AP
  reboot_timeout_wifi: 0s #management of enable / disable using switch wifi_slave
  access_point_timeout: 1min
  update_interval_long: 10min
  update_interval_short: 30s
# Fan levels
  level_1: "33"
# Debugging
  show_log: "true"
  log_level: "INFO" #NONE|ERROR|WARN|INFO|DEBUG|VERBOSE|VERY_VERBOSE, level DEBUG to show Dallas device adress
  show_internal: "true"

######################### Preparations #######################################

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

packages:
  network:        !include fan-slave/network.yaml
  manage_device:  !include fan-common/manage_device.yaml
  # debug: !include common/debug.yaml
  test_cases:     !include fan-slave/test-cases.yaml     #Functionality for testing
  timeout:        !include fan-slave/timeout.yaml        #Sensors to check connection Master <-> Slave
  temp_sensors:   !include fan-slave/temp-sensors.yaml   #Dallas temp sensors
  fans:           !include fan-slave/fans.yaml           #Fans, PWM and tacho
  clamps:         !include fan-slave/clamps.yaml         #Clamps

# Enable logging
logger:
  level: ${log_level}

web_server:
  include_internal: ${show_internal}
  log: ${show_log}
  version: 3
  local: true

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: dosch.fan
    version: "1.0"
  includes:
    - "fan-slave/handler-slave.h"
    - "fan-common/handler-common.h"
    
  on_boot:
    priority: -100.0 #initialize at the end of the boot
    then:
      - lambda: |-
          initialize_serial();
      - fan.turn_on:
          id: fan_used
          speed: ${level_1}
      - fan.turn_on:
          id: fan_fresh
          speed: ${level_1}

  on_loop: 
    then:
      - lambda: |-
          receive_data();

interval:
  - interval: 0.1s
    then:     
      - lambda: |-
          analyse_receive_queue();
  - interval: ${update_interval_short}
    startup_delay: 3s
    then:
      - lambda: |-
          message("FFS", id(fan_fresh).speed); 
  - interval: ${update_interval_short}
    startup_delay: 6s
    then:
      - lambda: |-
          message("FUS", id(fan_used).speed); 
  - interval: ${update_interval_short}
    startup_delay: 9s
    then:
      - lambda: |-
          message("WIS", id(wifi_slave).state);
  - interval: ${update_interval_short}
    startup_delay: 12s
    then:
      - lambda: |-
          message("FHS", id(flap_heat_exchanger).state);        

####################################### Switches ############################################
switch:

# Relay for flap heat exchanger
  - platform: gpio
    id: flap_heat_exchanger
    name: Klappe WÃ¤rmetauscher (FHS)
    icon: mdi:valve
    restore_mode: ALWAYS_OFF #flap closed if no power
    pin: GPIO17
    web_server_sorting_weight: 20
    on_turn_on:
    - lambda: |-
        message("FHS", id(flap_heat_exchanger).state);
    on_turn_off:
    - lambda: |-
        message("FHS", id(flap_heat_exchanger).state);

# Wifi Slave
  - platform: template
    id: wifi_slave
    name: Wifi Slave
    icon: mdi:signal-variant
    device_class: ""
    entity_category: config
    web_server_sorting_weight: 100
    restore_mode: ALWAYS_ON
    optimistic: true
    on_turn_on:
    - lambda: |-
        message("WIS", id(wifi_slave).state);
    - wifi.enable:
    on_turn_off:
    - lambda: |-
        message("WIS", id(wifi_slave).state);
    - wifi.disable:

light:
  - platform: status_led
    name: "Error Serial"
    id: led_red
    pin: 25
    icon: mdi:led-on
    entity_category: diagnostic
    web_server_sorting_weight: 50

  - platform: status_led
    name: "WiFi connected"
    id: led_yellow
    pin: 26
    icon: mdi:led-on
    entity_category: diagnostic
    web_server_sorting_weight: 51
