substitutions:
  name: "fan-master"
  friendly_name: "Master"
  reboot_timeout_wifi: 6min
  reboot_timeout_api: 30min 
  access_point_timeout: 5min
  update_interval_long: 15min
  update_interval_short: 20s
  # Fan levels
  level_1: "33"
  level_2: "66"
  level_3: "100"
  # Debugging
  show_log: "true"
  log_level: "INFO" #NONE|ERROR|WARN|INFO|DEBUG|VERBOSE|VERY_VERBOSE
  show_internal: "false"


globals:
  - id: start_heating_period
    type: int
    restore_value: no
    initial_value: "9" #month
  - id: end_heating_period
    type: int
    restore_value: no
    initial_value: "5" #month
  - id: target_temperature_summer # = heating_period false
    type: int
    restore_value: no
    initial_value: "18"
  - id: target_temperature_winter # = heating_period true
    type: int
    restore_value: no
    initial_value: "26" #for not losing energy
  - id: productive
    type: bool
    restore_value: no
    initial_value: "false" #   -> triggers initial wifi behaviour XXX



######################### Preparations #######################################
esp32:
  board: nodemcu-32s
  framework:
    type: arduino

packages:
  network:        !include fan-master/network.yaml
  manage_device:  !include fan-common/manage_device.yaml
  # debug:        !include common/debug.yaml
  test_cases:     !include fan-master/test-cases.yaml     #Functionality for testing
  errors:         !include fan-master/errors.yaml         #Sensors to count errors on bus
  timeout:        !include fan-master/timeout.yaml        #Sensors to check connection Master <-> Slave
  autonom:        !include fan-master/autonom.yaml        #Intervals to define behaviour, if no connection to home assistant
  mirror:         !include fan-master/mirror.yaml         #All functionality to mirror sensors on Slave to Master (intervals and sensors)
  manage_slave:   !include fan-master/manage_slave.yaml   #Reset Slave, manage Wifi on Slave
  fans:           !include fan-master/fans.yaml           #Fans fresh / used air, target

# Enable logging
logger:
  level: ${log_level}

web_server:
  include_internal: ${show_internal}
  log: ${show_log}
  version: 3
  local: true

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: dosch.fan
    version: "1.0"

  includes:
  - "fan-master/handler-master.h"
  - "fan-common/handler-common.h"

################################ On Boot / Initials ################################
  on_boot:
    priority: -100.0
    then:
    - lambda: |-
        initialize_serial();

#Initial levels fans depending on switch
    #turnswitch1, turnswitch0 (auto)
    - if:
        condition:
          or:
            - binary_sensor.is_on: turnswitch1
            - binary_sensor.is_on: turnswitch0
        then:
          - fan.turn_on:
              id: fan_used_target
              speed: ${level_1}
          - fan.turn_on:
              id: fan_fresh_target
              speed: ${level_1}
    #turnswitch2
    - if:
        condition:
          binary_sensor.is_on: turnswitch2
        then:
          - fan.turn_on:
              id: fan_used_target
              speed: ${level_2}
          - fan.turn_on:
              id: fan_fresh_target
              speed: ${level_2}
    #turnswitch3
    - if:
        condition:
          binary_sensor.is_on: turnswitch3
        then:
          - fan.turn_on:
              id: fan_used_target
              speed: ${level_3}
          - fan.turn_on:
              id: fan_fresh_target
              speed: ${level_3}
    #Set all error counter to 0
    - lambda: |-
        id(count_error_wrong_delimiter_sensor).publish_state(0);
    - lambda: |-
        id(count_error_wrong_checksum_sensor).publish_state(0);
    #Set wifi slave, initial state ALWAYS_OFF
    - lambda: |-
        if (id(productive) == false) 
        {
          id(wifi_slave_target).publish_state(true);
        }

######################### Interval #############################

interval:
#for sending / receiving (performance issues if in on_loop)
 - interval: 0.1s
   then:
   - lambda: |-
      analyse_queue();
 - interval: 0.2s
   then:
   - lambda: |-
      request_data();

#for Home Assistant Connection Sensor
 - interval: ${update_interval_long}
   startup_delay: 21s
   then:
    - if:
        condition:
          - api.connected:
        then:
          - binary_sensor.template.publish:
              id: connection_to_home_assistant
              state: ON
        else:
          - binary_sensor.template.publish:
              id: connection_to_home_assistant
              state: OFF

######################### Switch: heat exchanger target, general switch ###############################
switch:

# Flap Heat Exchanger Target, see also mirror Flap Heat Exchanger Slave (binary_sensor)
  - platform: template
    id: flap_heat_exchanger_target
    name: Klappe Wärmetauscher Ziel
    icon: mdi:valve
    web_server_sorting_weight: 25
    restore_mode: ALWAYS_OFF
    optimistic: true
    on_turn_on:
    - lambda: |-
        command("FHS", id(flap_heat_exchanger_target).state); 
    on_turn_off:
    - lambda: |-
        command("FHS", id(flap_heat_exchanger_target).state);

#Turn off fans
  - platform: template
    id: general_switch
    name: Lüfter ein / aus
    icon: mdi:toggle-switch
    web_server_sorting_weight: 26
    restore_mode: ALWAYS_ON
    optimistic: true
    on_turn_on:
    #Levels depending on turnswitch
    #turnswitch1, turnswitch0 (auto)
    - if:
        condition:
          or:
            - binary_sensor.is_on: turnswitch1
            - binary_sensor.is_on: turnswitch0
        then:
          - fan.turn_on:
              id: fan_used_target
              speed: ${level_1}
          - fan.turn_on:
              id: fan_fresh_target
              speed: ${level_1}
    #turnswitch2
    - if:
        condition:
          binary_sensor.is_on: turnswitch2
        then:
          - fan.turn_on:
              id: fan_used_target
              speed: ${level_2}
          - fan.turn_on:
              id: fan_fresh_target
              speed: ${level_2}
    #turnswitch3
    - if:
        condition:
          binary_sensor.is_on: turnswitch3
        then:
          - fan.turn_on:
              id: fan_used_target
              speed: ${level_3}
          - fan.turn_on:
              id: fan_fresh_target
              speed: ${level_3}
    on_turn_off:
      - fan.turn_on:
          id: fan_used_target
          speed: 1
      - fan.turn_on:
          id: fan_fresh_target
          speed: 1

######################## Binary Sensor: HW turnswitches, heating period, connection to home assistant, status ############################
binary_sensor:

# Knob position 0 = Auto
  - platform: template
    id: turnswitch0
    name: Drehschalter 0 (Auto)
    icon: mdi:knob
    web_server_sorting_weight: 31
    lambda: |-
      if ((id(turnswitch1).state == false) && (id(turnswitch2).state == false) && (id(turnswitch3).state == false))
      {return true;}
      else
      {return false;}
    on_state: 
      then:
        - if:
            condition:
              binary_sensor.is_on: turnswitch0
            then:
              - switch.turn_on: general_switch
              - fan.turn_on:
                  id: fan_fresh_target
                  speed: ${level_1}
              - fan.turn_on:
                  id: fan_used_target
                  speed: ${level_1}

# Knob position 1
  - platform: gpio
    id: turnswitch1
    name: Drehschalter 1
    icon: mdi:knob
    web_server_sorting_weight: 31
    pin:
      number: GPIO34
      inverted: true
      mode:
        input: true
    on_state: 
      then:
        - if:
            condition:
              binary_sensor.is_on: turnswitch1
            then:
              - switch.turn_on: general_switch
              - fan.turn_on:
                  id: fan_fresh_target
                  speed: ${level_1}
              - fan.turn_on:
                  id: fan_used_target
                  speed: ${level_1}
        
# Knob position 2
  - platform: gpio
    id: turnswitch2
    name: Drehschalter 2
    icon: mdi:knob
    web_server_sorting_weight: 32
    pin:
      number: GPIO33
      inverted: true
      mode:
        input: true
    on_state: 
      then:
        - if:
            condition:
              binary_sensor.is_on: turnswitch2
            then:
              - switch.turn_on: general_switch
              - fan.turn_on:
                  id: fan_fresh_target
                  speed: ${level_2}
              - fan.turn_on:
                  id: fan_used_target
                  speed: ${level_2}

        
# Knob position 3
  - platform: gpio
    id: turnswitch3
    name: Drehschalter 3
    icon: mdi:knob
    web_server_sorting_weight: 33
    pin:
      number: GPIO36
      inverted: true
      mode:
        input: true
    on_state: 
      then:
        - if:
            condition:
              binary_sensor.is_on: turnswitch3
            then:
              - switch.turn_on: general_switch
              - fan.turn_on:
                  id: fan_fresh_target
                  speed: ${level_3}
              - fan.turn_on:
                  id: fan_used_target
                  speed: ${level_3}

# Heating period ON / OFF -> impact on flap_heat_exchanger if autonomous
  - platform: template
    id: heating_period
    name: Heizperiode (für autonom)
    icon: mdi:heating-coil
    web_server_sorting_weight: 35
    lambda: |-
      auto month = id(sntp_time).now().month;
      if (id(sntp_time).now().is_valid())
       {
        if (month > id(start_heating_period) || month < id(end_heating_period))
          return true;
        else return false;
       }
      else 
        if (id(temp_fresh_before_mirror).state < 18)
          return true;
        else return false;


  - platform: template
    id: connection_to_home_assistant
    name: Home Assistant Connection
    device_class: connectivity
    entity_category: diagnostic
    icon: mdi:lan-connect
    web_server_sorting_weight: 242
    # Updates managed by interval

  - platform: status
    name: ${friendly_name} Status
    id: connection_status
    device_class: connectivity
    entity_category: diagnostic
    icon: mdi:lan-connect
    web_server_sorting_weight: 242


######################## Control LEDs #########################

light:
  - platform: status_led
    name: "Error Serial"
    id: led_red
    pin: 25
    icon: mdi:led-on
    entity_category: diagnostic
    web_server_sorting_weight: 51

  - platform: status_led
    name: "Error WiFi"
    id: led_yellow
    pin: 26
    icon: mdi:led-on
    entity_category: diagnostic
    web_server_sorting_weight: 52

######################## Time ################################
time:
# Alternative using homeassistant directly
  # - platform: homeassistant
  #   id: homeassistant_time
  - platform: sntp
    id: sntp_time
    timezone: Europe/Zurich